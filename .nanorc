#       Colors optimised for _black_ background
#
## Sample initialization file for GNU nano
## Please note that you must have configured nano with --enable-nanorc
## for this file to be read!  Also note that characters specially
## interpreted by the shell should not be escaped here.
##
## To make sure a value is not enabled, use "unset <option>"
##
## For the options that take parameters, the default value is given.
## Other options are unset by default.

## Use auto-indentation
# set autoindent

## Backup files to filename~
set backup

## The directory to put the backup files in.
set backupdir "~/.nano/backup"

## Constantly display the cursor position in the status bar.
set constantshow

## Use cut to end of line with ^K by default
# set cut

## Set the line length for wrapping text and justifying paragraphs.
## If fill is negative, the line length will be the screen width less
## this number.
##
# set fill -8

## Enable ~/.nano_history for saving and reading search/replace strings.
set historylog

## Allow multiple file buffers (using ^R inserts into separate buffer).
## You must have configured with --enable-multibuffer or --enable-extra
## for this to work.
##
## set multibuffer

## Don't convert files from DOS/Mac format
# set noconvert

## Don't follow symlinks when writing files
# set nofollow

## Don't display the help lists at the bottom of the screen
# set nohelp

## Don't wrap text at all
set nowrap

## Set operating directory.  nano will not read or write files outside
## this directory and its subdirectories.  Also, the current directory
## is changed to here, so files are inserted from this dir.  A blank
## string means the operating directory feature is turned off.
##
# set operatingdir ""

## Preserve the XON and XOFF keys (^Q and ^S)
# set preserve

## The email-quote string, used to justify email-quoted paragraphs.
## This is an extended regular expression if your system supports them,
## otherwise a literal string.  Default:
# set quotestr "^([     ]*[\|>:}#])+"
## if you have regexps, otherwise:
# set quotestr "> "
## You can get old nano quoted-justify behavior via:
# set quotestr "(> )+"

## Fix Backspace/Delete confusion problem
# set rebinddelete

## Do extended regular expression searches by default
# set regexp

## Use smooth scrolling as the default
# set smooth

## Use this spelling checker instead of the internal one.  This option
## does not properly have a default value.
##
set speller "aspell -c"

## Allow nano to be suspended with ^Z
# set suspend

## Use this tab size instead of the default; it must be greater than 0
# set tabsize 8

## Use this tab char instead of the default space; it can either be the
## ascii value of the character you wish to see (refer to ascii(7)) or
## it can be a single character.  187 seems to be a 'good' value.
# set tabconvert 32
## Same as tabconverting above, but applied to spaces.
## it can be a single character.  183 seems to be a 'good' value.
# set spaceconvert 32
## Finally, you can toggle whitespace converting with this
# set wsconvert

## Save automatically on exit, don't prompt
# set tempfile

## Disallow file modification, why would you want this in an rc file? ;)
# set view

## Color setup
## Format:
## syntax "short description" ["filename regex" ...]
## color foreground,background "regex" ["regex"...]
##
## Legal colors: white, black, red, blue, green, yellow, magenta, cyan.
## You may use the prefix "bright" to mean a stronger color highlight.
##
## To use multi-line regexes use the start="regex" end="regex" format.
##
## If your system supports transparency, not specifying a background
## color will use a transparent color.  If you don't want this, be sure
## to set the background color to black or white.
##
syntax "c-file" "\.(c|h)$"
color red "\<[A-Z_]{2,}\>"
color green "\<(float|char|int|void|static|const|struct)\>"
color brightmagenta "\<(if|while|do|else|case|switch)\>"
color brightcyan "^ *# *(define|include|ifn?def|endif|elif|else|if)"
##
## You will in general want your comments and strings to come last,
## because syntax highlighting rules will be applied in the order they
## are read in.
##
color blue "<[^= ]*>" ""(\\.|[^\"])*""
##
## This string is VERY resource intensive!!!
# color brightyellow start=""(\\.|[^\"])*\\ *$" end="^(\\.|[^\"])*""
##
## And we want to have some nice comment highlighting too
color brightblue "//.*"
color brightblue start="/\*" end="\*/"


##########################################################################
##########################################################################
#
#
# D U M M Y Ruleset
#
#
# If you want to create your own rules you can use this simple example:
#
# syntax "Dummy" "(\.|/|)foo$"  -> this creates the ruleset "Dummy" and it
#                                  matches all filenames ending with foo
#               "foo"           -> this matches foo exactly
#               "foo.*$"        -> this matches files beginning with foo
#
#
#
# After you selected the files you can define rulesets for this file:
#
#
# color blue "#.*$"             -> colors all after "#" blue on this line
# color red "\@"                -> colors all "@" red, \ means to handle it _not_
#                                  as a special sign
# color yellow "\<(profi)\>"    -> colors only the word profi yellow
# color yellow "profi"          -> colors all strings "profi" yellow, also in
#                                  profile
# color black "[0-9]"           -> colors all numbers black
# color magenta "'(\\.|[^'])*'" -> colors all between ' and ' magenta,
#                                  but only on the same line
# color red "[A-Z0-9\_]+="      -> matches everything folowed  by =
# color green "setenv|export"   -> matches the string setenv OR export
# color cyan "^.*(foobar).*$"   -> colors the whole line cyan, by matching foobar
#                                  on that line
#
# color brightred,blue start="<!--" end="-->"
#
#                               -> colors all between <!-- and --> brightred on blue
#                                  even if there are more lines between
#
#
###########################################################################



set nowrap
#set smooth
set historylog
#set morespace
set tabsize 4
set tabstospaces
set constantshow

## Include .nanorc files
include /opt/homebrew/opt/nanorc/share/nanorc/*.nanorc
